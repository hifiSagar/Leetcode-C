/*
 * 57. Insert Interval
 *
 * You are given an array of non-overlapping intervals intervals 
 * where intervals[i] = [starti, endi] represent the start and the 
 * end of the ith interval and intervals is sorted in ascending 
 * order by starti. You are also given an interval newInterval = 
 * [start, end] that represents the start and end of another interval.
 * 
 * Insert newInterval into intervals such that intervals is still sorted 
 * in ascending order by starti and intervals still does not have any 
 * overlapping intervals (merge overlapping intervals if necessary).
 * 
 * Return intervals after the insertion.
 *
 * 0 <= intervals.length <= 10^4
 * intervals[i].length == 2
 * 0 <= starti <= endi <= 10^5
 * intervals is sorted by starti in ascending order.
 * newInterval.length == 2
 * 0 <= start <= end <= 10^5
 */

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
 
#define MAX(a, b) ((a) > (b) ? (a) : (b))

int cmp(const void *a, const void *b)
{
    return (*((int **)a))[0] - (*((int **)b))[0];
}
 
int** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes){

    /*
     * Input:
     *  intervals,
     *  intervalsSize
     *  intervalsColSize
     *  newInterval
     *  newIntervalSize
     */
     
    int seg_start = newInterval[0], seg_end = newInterval[1];
    int **ans = (int **)malloc(sizeof(int *) * (intervalsSize + 1));
    int **tmp = (int **)malloc(sizeof(int *) * (intervalsSize + 1));
    (*returnColumnSizes) = (int *)malloc(sizeof(int) * (intervalsSize + 1));
    
    *returnSize = 0;
    
    /* Copy intervals to tmp buffer */
    for (int i = 0; i < intervalsSize; i++) {
        tmp[i] = (int *)malloc(sizeof(int) * 2);
        tmp[i][0] = intervals[i][0];
        tmp[i][1] = intervals[i][1];
    }
    
    /* Append newInterval to tmp buffer */
    tmp[intervalsSize] = (int *)malloc(sizeof(int) * 2);
    ans[intervalsSize] = (int *)malloc(sizeof(int) * 2);
    tmp[intervalsSize][0] = newInterval[0];
    tmp[intervalsSize][1] = newInterval[1];
    
    /* Sort by start */
    qsort(tmp, intervalsSize + 1, sizeof(int *), cmp);
    
    seg_start = tmp[0][0];
    seg_end = tmp[0][1];

    /* Merge the interval */
    for (int i = 0; i < intervalsSize + 1; i++) {
        /* Check if segements can be merged, and store the start and end position of merged segment */
        if (tmp[i][0] >= seg_start && tmp[i][0] <= seg_end) {
            seg_end = MAX(seg_end, tmp[i][1]);
        }
        /* Complete current segment */
        else {
            ans[*returnSize] = (int *)malloc(sizeof(int) * 2);
            ans[*returnSize][0] = seg_start;
            ans[*returnSize][1] = seg_end;
            (*returnColumnSizes)[*returnSize] = 2;
            *returnSize += 1;
            seg_start = tmp[i][0];
            seg_end = tmp[i][1];
        }
    
        /* Add last one segment */
        if (i == intervalsSize) {
            ans[*returnSize] = (int *)malloc(sizeof(int) * 2);
            ans[*returnSize][0] = seg_start;
            ans[*returnSize][1] = seg_end;
            (*returnColumnSizes)[*returnSize] = 2;
            *returnSize += 1;
        }
    }
    
    for (int i = 0; i < intervalsSize + 1; i++) {
        free(tmp[i]);
    }

    free(tmp);
     
    /*
     * Output:
     *  returnSize
     *  returnColumnSizes
     */
     
    return ans;

}