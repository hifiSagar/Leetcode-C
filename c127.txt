#include <stdio.h>
#include <stdlib.h>

int maximalRectangle(char** matrix, int matrixSize, int* matrixColSize) {
    if (matrixSize == 0) return 0;

    int numCols = matrixColSize[0];
    int* heights = (int*)calloc(numCols, sizeof(int));
    int maxArea = 0;

    for (int i = 0; i < matrixSize; i++) {
        for (int j = 0; j < numCols; j++) {
            if (matrix[i][j] == '0') {
                heights[j] = 0;
            } else {
                heights[j] += 1;
            }
        }

        int* nextSmaller = (int*)malloc(numCols * sizeof(int));
        int* prevSmaller = (int*)malloc(numCols * sizeof(int));
        for (int j = 0; j < numCols; j++) prevSmaller[j] = -1;
        for (int j = 0; j < numCols; j++) nextSmaller[j] = numCols;

        int* stack = (int*)malloc(numCols * sizeof(int));
        int top = -1;

        for (int j = numCols - 1; j >= 0; j--) {
            while (top != -1 && heights[stack[top]] >= heights[j]) top--;
            if (top != -1) nextSmaller[j] = stack[top];
            stack[++top] = j;
        }

        top = -1;

        for (int j = 0; j < numCols; j++) {
            while (top != -1 && heights[stack[top]] >= heights[j]) top--;
            if (top != -1) prevSmaller[j] = stack[top];
            stack[++top] = j;
        }

        for (int j = 0; j < numCols; j++) {
            int width = nextSmaller[j] - prevSmaller[j] - 1;
            int area = heights[j] * width;
            if (area > maxArea) maxArea = area;
        }

        free(nextSmaller);
        free(prevSmaller);
        free(stack);
    }

    free(heights);
    return maxArea;
}
