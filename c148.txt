#include <stdbool.h>

int getWordScore(int score[6][26], const char *word) {
    int ret = 0;
    for (int j = 0; j < 6; j++) {
        ret += score[j][word[j] - 'a'];
    }
    return ret;
}

int getMatches(const char *word1, const char *word2) {
    int ret = 0;
    for (int j = 0; j < 6; j++) {
        if (word1[j] == word2[j])
            ret++;
    }
    return ret;
}

void findSecretWord(char **words, int wordsSize, Master *master) {
    int score[6][26] = {0};
    bool isWrong[128] = {false};

    for (int i = 0; i < wordsSize; i++) {
        for (int j = 0; j < 6; j++) {
            score[j][words[i][j] - 'a']++;
        }
    }

    int minScore = getWordScore(score, words[0]);
    int minScoreIndex = 0;

    for (int i = 1; i < wordsSize; i++) {
        int tempScore = getWordScore(score, words[i]);
        if (tempScore < minScore) {
            minScore = tempScore;
            minScoreIndex = i;
        }
    }

    int matches;
    while ((matches = guess(master, words[minScoreIndex])) != 6) {
        isWrong[minScoreIndex] = true;

        for (int i = 0; i < wordsSize; i++) {
            if (isWrong[i] || i == minScoreIndex)
                continue;
            if (getMatches(words[i], words[minScoreIndex]) != matches) {
                for (int j = 0; j < 6; j++) {
                    score[j][words[i][j] - 'a']--;
                }
                isWrong[i] = true;
            }
        }

        minScore = 9999;
        minScoreIndex = -1;

        for (int i = 0; i < wordsSize; i++) {
            if (isWrong[i])
                continue;
            int tempScore = getWordScore(score, words[i]);
            if (tempScore < minScore) {
                minScore = tempScore;
                minScoreIndex = i;
            }
        }

        if (minScoreIndex == -1) return; // Fail-safe
    }
}
