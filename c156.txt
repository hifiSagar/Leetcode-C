#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 10000

int* findMinHeightTrees(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize) {
    if (n == 1) {
        int* res = (int*)malloc(sizeof(int));
        res[0] = 0;
        *returnSize = 1;
        return res;
    }

    int* graph[MAX_NODES];
    int graphSizes[MAX_NODES] = {0};
    int degrees[MAX_NODES] = {0};

    for (int i = 0; i < n; i++) {
        graph[i] = (int*)malloc(n * sizeof(int));
    }

    for (int i = 0; i < edgesSize; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        graph[u][graphSizes[u]++] = v;
        graph[v][graphSizes[v]++] = u;
        degrees[u]++;
        degrees[v]++;
    }

    int* queue = (int*)malloc(n * sizeof(int));
    int front = 0, rear = 0;
    for (int i = 0; i < n; i++) {
        if (degrees[i] == 1) {
            queue[rear++] = i;
        }
    }

    int remainingNodes = n;
    while (remainingNodes > 2) {
        int size = rear - front;
        remainingNodes -= size;

        for (int i = 0; i < size; i++) {
            int leaf = queue[front++];
            for (int j = 0; j < graphSizes[leaf]; j++) {
                int neighbor = graph[leaf][j];
                degrees[neighbor]--;
                if (degrees[neighbor] == 1) {
                    queue[rear++] = neighbor;
                }
            }
        }
    }

    int* result = (int*)malloc((rear - front) * sizeof(int));
    *returnSize = rear - front;
    for (int i = 0; i < *returnSize; i++) {
        result[i] = queue[front + i];
    }

    for (int i = 0; i < n; i++) {
        free(graph[i]);
    }
    free(queue);

    return result;
}
