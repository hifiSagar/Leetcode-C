#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

bool isSafe(int *board, int row, int col) {
    for (int i = 0; i < row; i++) {
        if (board[i] == col) return false;
        if (abs(board[i] - col) == abs(i - row)) return false;
    }
    return true;
}

char** buildBoard(int *board, int n) {
    char **grid = (char **)malloc(n * sizeof(char *));
    for (int i = 0; i < n; i++) {
        grid[i] = (char *)malloc((n + 1) * sizeof(char));
        for (int j = 0; j < n; j++) {
            grid[i][j] = (board[i] == j ? 'Q' : '.');
        }
        grid[i][n] = '\0';
    }
    return grid;
}

void backtrack(int *board, int row, int n, char ****result, int *returnSize) {
    if (row == n) {
        (*result)[*returnSize] = buildBoard(board, n);
        (*returnSize)++;
        return;
    }
    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col)) {
            board[row] = col;
            backtrack(board, row + 1, n, result, returnSize);
        }
    }
}

char*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {
    int maxSolutions = 1000;
    char ***result = (char ***)malloc(maxSolutions * sizeof(char **));
    int *board = (int *)malloc(n * sizeof(int));
    *returnSize = 0;

    backtrack(board, 0, n, &result, returnSize);

    *returnColumnSizes = (int *)malloc((*returnSize) * sizeof(int));
    for (int i = 0; i < *returnSize; i++) {
        (*returnColumnSizes)[i] = n;
    }

    free(board);
    return result;
}
