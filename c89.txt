// this problem is small enough that we can program it silly
bool isValidSubset(char set[9]) {
	short reference = 0;
	for (size_t i = 0; i<9; ++i) {
		if ('.' == set[i]) {
			continue;
		}
		if (1 & (reference >> (set[i] - '1'))) {
			return false;
		}
		reference |= 1 << (set[i] - '1');
	}
	return true;
}

bool isValidSudoku(char** board, int boardSize, int* boardColSize) {
	for (size_t row = 0; row < 9; ++row) {
		if (!isValidSubset((char [9]){board[row][0],board[row][1],board[row][2],board[row][3],board[row][4],board[row][5],board[row][6],board[row][7],board[row][8]})) {
			return false;
		}
	}
	for (size_t col = 0; col < 9; ++col) {
		if(!isValidSubset((char [9]){board[0][col],board[1][col],board[2][col],board[3][col],board[4][col],board[5][col],board[6][col],board[7][col],board[8][col]})) {
			return false;
		}
	}

	if(!(
				isValidSubset((char [9]){board[0][0],board[0][1],board[0][2],board[1][0],board[1][1],board[1][2],board[2][0],board[2][1],board[2][2]}) &&
				isValidSubset((char [9]){board[3][0],board[3][1],board[3][2],board[4][0],board[4][1],board[4][2],board[5][0],board[5][1],board[5][2]}) &&
				isValidSubset((char [9]){board[6][0],board[6][1],board[6][2],board[7][0],board[7][1],board[7][2],board[8][0],board[8][1],board[8][2]}) &&
				isValidSubset((char [9]){board[0][3],board[0][4],board[0][5],board[1][3],board[1][4],board[1][5],board[2][3],board[2][4],board[2][5]}) &&
				isValidSubset((char [9]){board[3][3],board[3][4],board[3][5],board[4][3],board[4][4],board[4][5],board[5][3],board[5][4],board[5][5]}) &&
				isValidSubset((char [9]){board[6][3],board[6][4],board[6][5],board[7][3],board[7][4],board[7][5],board[8][3],board[8][4],board[8][5]}) &&
				isValidSubset((char [9]){board[0][6],board[0][7],board[0][8],board[1][6],board[1][7],board[1][8],board[2][6],board[2][7],board[2][8]}) &&
				isValidSubset((char [9]){board[3][6],board[3][7],board[3][8],board[4][6],board[4][7],board[4][8],board[5][6],board[5][7],board[5][8]}) &&
				isValidSubset((char [9]){board[6][6],board[6][7],board[6][8],board[7][6],board[7][7],board[7][8],board[8][6],board[8][7],board[8][8]})
	    )) {
		return false;
	}

	return true;
}