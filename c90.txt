void initialize(char **board, bool row[9][9], bool col[9][9], bool grid[9][9]) {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] != '.') {
                int num = board[i][j] - '1';
                if (num < 0 || num >= 9) {
                    return;
                }
                row[i][num] = true;
                col[j][num] = true;
                grid[(i / 3) * 3 + (j / 3)][num] = true;
            }
        }
    }
}

bool solve(char **board, bool row[9][9], bool col[9][9], bool grid[9][9], int r, int c) {
    if (r == 9) {
        return true; 
    }

    int next_r = (c == 8) ? r + 1 : r;
    int next_c = (c == 8) ? 0 : c + 1;

    if (board[r][c] != '.') {
        return solve(board, row, col, grid, next_r, next_c);
    }

    int grid_idx = (r / 3) * 3 + (c / 3);
    for (int num = 0; num < 9; num++) {
        if (!row[r][num] && !col[c][num] && !grid[grid_idx][num]) {
            board[r][c] = '1' + num;
            row[r][num] = col[c][num] = grid[grid_idx][num] = true;

            if (solve(board, row, col, grid, next_r, next_c)) {
                return true;
            }

            board[r][c] = '.';
            row[r][num] = col[c][num] = grid[grid_idx][num] = false;
        }
    }

    return false;
}


void solveSudoku(char **board, int boardSize, int *boardColSize) {
    if (boardSize != 9 || *boardColSize != 9) {
        return;
    }
    bool row[9][9] = {false};
    bool col[9][9] = {false};
    bool grid[9][9] = {false};
    initialize(board, row, col, grid);
    solve(board, row, col, grid, 0, 0);
}